# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['path', 'df', 'tst_files', 'get_images', 'get_label', 'train', 'main']

# %% ../nbs/00_core.ipynb 3
from fastai.vision.all import *
path = Path('/home/gegg00/Desktop/aiornot/')
df = pd.read_csv(path/'train.csv')

# %% ../nbs/00_core.ipynb 4
def get_images(path):
    return [path/'data/train'/i[0] for i in df.values]

def get_label(o):
    return df.iloc[Int(os.path.basename(o).split('.')[0])]['label'] 

# %% ../nbs/00_core.ipynb 6
tst_files = get_image_files(path/'data/test').sorted()

# %% ../nbs/00_core.ipynb 8
def train(arch, size, accum=1, finetune=True, epochs=12):
    dls = DataBlock(
        blocks=(ImageBlock, CategoryBlock), 
        get_items=get_images, 
        splitter=RandomSplitter(valid_pct=0.2, seed=42),
        get_y=get_label,
        item_tfms=[Resize(size, method='squish')],
        batch_tfms=aug_transforms(size=size, min_scale=0.75)
    ).dataloaders(path, bs=64//accum)
    cbs = GradientAccumulation(64) if accum else []
    learn = vision_learner(dls, arch, metrics=error_rate, cbs=cbs).to_fp16()
    if finetune:
        learn.fine_tune(epochs, 0.01)
        return learn.tta(dl=dls.test_dl(tst_files))
    else:
        learn.unfreeze()
        learn.fit_one_cycle(epochs, 0.01)

# %% ../nbs/00_core.ipynb 9
from fastcore.script import *
@call_parse

def main(arch:str,   #Model to use from timm 
         size:int,  #size of the images
         accum:int, #size of the batch
         epochs:int, #number of epochs
         finetune:bool):  #Fine tune model
    print(train(arch, size, accum, finetune, epochs=epochs))
    #tst_files = get_image_files(path/'data/test').sorted()
    #tst_dl = dls.test_dl(tst_files)
